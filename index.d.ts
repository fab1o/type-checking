/** Declaration file generated by dts-gen */

export function Config(): void;

export function createTypes(...args: any[]): any;

export function typecheck(...args: any[]): any;

export namespace Config {
    class Error {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        toString(): any;

        static captureStackTrace(p0: any, p1: any): any;

        static stackTraceLimit: number;

    }

    const arrayOfMessage: string;

    const etceteraOn: boolean;

    const expectedMessage: string;

    const optionalBracketsOn: boolean;

    const parentsOn: boolean;

    const receivedMessage: string;

    const withPropsMessage: string;

    function reset(): void;

    function setup(...args: any[]): void;

}

export namespace Types {
    function array(p0: any, p1: any, p2: any): any;

    function between(...args: any[]): any;

    function custom(...args: any[]): any;

    function date(p0: any, p1: any, p2: any): any;

    function even(p0: any, p1: any, p2: any): any;

    function greater(...args: any[]): any;

    function greaterOrEqual(...args: any[]): any;

    function inRange(...args: any[]): any;

    function instance(...args: any[]): any;

    function instanceStrict(...args: any[]): any;

    function integer(p0: any, p1: any, p2: any): any;

    function keyIn(...args: any[]): any;

    function less(...args: any[]): any;

    function lessOrEqual(...args: any[]): any;

    function like(...args: any[]): any;

    function match(...args: any[]): any;

    function negative(p0: any, p1: any, p2: any): any;

    function nonEmptyArray(p0: any, p1: any, p2: any): any;

    function nonEmptyObject(p0: any, p1: any, p2: any): any;

    function nonEmptyString(p0: any, p1: any, p2: any): any;

    function number(p0: any, p1: any, p2: any): any;

    function object(...args: any[]): any;

    function odd(p0: any, p1: any, p2: any): any;

    function positive(p0: any, p1: any, p2: any): any;

    function string(p0: any, p1: any, p2: any): any;

    function thenable(p0: any, p1: any, p2: any): any;

    namespace array {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace of {
            function array(p0: any, p1: any, p2: any): any;

            function between(...args: any[]): any;

            function custom(...args: any[]): any;

            function date(p0: any, p1: any, p2: any): any;

            function even(p0: any, p1: any, p2: any): any;

            function greater(...args: any[]): any;

            function greaterOrEqual(...args: any[]): any;

            function inRange(...args: any[]): any;

            function instance(...args: any[]): any;

            function instanceStrict(...args: any[]): any;

            function integer(p0: any, p1: any, p2: any): any;

            function keyIn(...args: any[]): any;

            function less(...args: any[]): any;

            function lessOrEqual(...args: any[]): any;

            function like(...args: any[]): any;

            function match(...args: any[]): any;

            function negative(p0: any, p1: any, p2: any): any;

            function nonEmptyArray(p0: any, p1: any, p2: any): any;

            function nonEmptyObject(p0: any, p1: any, p2: any): any;

            function nonEmptyString(p0: any, p1: any, p2: any): any;

            function number(p0: any, p1: any, p2: any): any;

            function object(...args: any[]): any;

            function odd(p0: any, p1: any, p2: any): any;

            function positive(p0: any, p1: any, p2: any): any;

            function string(p0: any, p1: any, p2: any): any;

            function thenable(p0: any, p1: any, p2: any): any;

            namespace array {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.array
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.array
                const type: any;

            }

            namespace date {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.date
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.date
                const type: any;

            }

            namespace even {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.even
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.even
                const type: any;

            }

            namespace integer {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.integer
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.integer
                const type: any;

            }

            namespace negative {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.negative
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.negative
                const type: any;

            }

            namespace nonEmptyArray {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyArray
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyArray
                const type: any;

            }

            namespace nonEmptyObject {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyObject
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyObject
                const type: any;

            }

            namespace nonEmptyString {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyString
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nonEmptyString
                const type: any;

            }

            namespace nullable {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const array: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const between: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const boolean: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const custom: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const date: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const even: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const float: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const function: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const greater: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const greaterOrEqual: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const in: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const inRange: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const instance: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const instanceStrict: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const integer: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const keyIn: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const less: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const lessOrEqual: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const like: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const match: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const negative: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const nonEmptyArray: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const nonEmptyObject: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const nonEmptyString: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const null: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const number: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const object: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const odd: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const positive: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const string: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.nullable
                const thenable: any;

            }

            namespace number {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.number
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.number
                const type: any;

            }

            namespace odd {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.odd
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.odd
                const type: any;

            }

            namespace positive {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.positive
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.positive
                const type: any;

            }

            namespace string {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.string
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.string
                const type: any;

            }

            namespace thenable {
                // Too-deep object hierarchy from dss__type_checking.Types.array.of.thenable
                const optional: any;

                // Too-deep object hierarchy from dss__type_checking.Types.array.of.thenable
                const type: any;

            }

        }

        namespace optional {
            const type: string;

        }

    }

    namespace date {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace even {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace integer {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace negative {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace nonEmptyArray {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace nonEmptyObject {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace nonEmptyString {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace nullable {
        function array(p0: any, p1: any, p2: any): any;

        function between(...args: any[]): any;

        function custom(...args: any[]): any;

        function date(p0: any, p1: any, p2: any): any;

        function even(p0: any, p1: any, p2: any): any;

        function greater(...args: any[]): any;

        function greaterOrEqual(...args: any[]): any;

        function inRange(...args: any[]): any;

        function instance(...args: any[]): any;

        function instanceStrict(...args: any[]): any;

        function integer(p0: any, p1: any, p2: any): any;

        function keyIn(...args: any[]): any;

        function less(...args: any[]): any;

        function lessOrEqual(...args: any[]): any;

        function like(...args: any[]): any;

        function match(...args: any[]): any;

        function negative(p0: any, p1: any, p2: any): any;

        function nonEmptyArray(p0: any, p1: any, p2: any): any;

        function nonEmptyObject(p0: any, p1: any, p2: any): any;

        function nonEmptyString(p0: any, p1: any, p2: any): any;

        function number(p0: any, p1: any, p2: any): any;

        function object(...args: any[]): any;

        function odd(p0: any, p1: any, p2: any): any;

        function positive(p0: any, p1: any, p2: any): any;

        function string(p0: any, p1: any, p2: any): any;

        function thenable(p0: any, p1: any, p2: any): any;

        namespace array {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace of {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const array: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const between: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const boolean: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const custom: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const date: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const even: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const float: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const function: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const greater: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const greaterOrEqual: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const in: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const inRange: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const instance: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const instanceStrict: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const integer: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const keyIn: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const less: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const lessOrEqual: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const like: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const match: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const negative: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const nonEmptyArray: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const nonEmptyObject: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const nonEmptyString: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const null: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const number: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const object: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const odd: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const positive: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const string: any;

                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.of
                const thenable: any;

            }

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.array.optional
                const type: any;

            }

        }

        namespace date {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.date.optional
                const type: any;

            }

        }

        namespace even {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.even.optional
                const type: any;

            }

        }

        namespace integer {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.integer.optional
                const type: any;

            }

        }

        namespace negative {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.negative.optional
                const type: any;

            }

        }

        namespace nonEmptyArray {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.nonEmptyArray.optional
                const type: any;

            }

        }

        namespace nonEmptyObject {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.nonEmptyObject.optional
                const type: any;

            }

        }

        namespace nonEmptyString {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.nonEmptyString.optional
                const type: any;

            }

        }

        namespace number {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.number.optional
                const type: any;

            }

        }

        namespace odd {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.odd.optional
                const type: any;

            }

        }

        namespace positive {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.positive.optional
                const type: any;

            }

        }

        namespace string {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.string.optional
                const type: any;

            }

        }

        namespace thenable {
            const type: string;

            function optional(p0: any, p1: any, p2: any): any;

            namespace optional {
                // Too-deep object hierarchy from dss__type_checking.Types.nullable.thenable.optional
                const type: any;

            }

        }

    }

    namespace number {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace odd {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace positive {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace string {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

    namespace thenable {
        const type: string;

        function optional(p0: any, p1: any, p2: any): any;

        namespace optional {
            const type: string;

        }

    }

}

export namespace typecheck {
    function config(options: any): void;

    function resetConfig(): void;

}

